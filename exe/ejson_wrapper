#!/usr/bin/env ruby

require "bundler/setup"
require "ejson_wrapper"

require 'optparse'

options = {
  region: nil,
  kms_key_id: nil
}
option_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: ejson_wrapper {generate,decrypt} [options]'

  opts.on('--region R', String, 'AWS Region') do |v|
    options[:region] = v
  end

  opts.on('--kms-key-id K', String, 'KMS Key ID') do |v|
    options[:kms_key_id] = v
  end

  opts.on('--file F', String, 'EJSON file to read or write') do |v|
    options[:file] = v
  end

  opts.on('--secret S', String, 'Secret to extract') do |v|
    options[:secret] = v
  end
end

command = ARGV[0]

option_parser.parse!

if options[:region].nil?
  STDERR.puts "Missing --region option"
  STDERR.puts option_parser
  exit 1
end

if options[:file].nil?
  STDERR.puts "Missing --file option"
  STDERR.puts option_parser
  exit 1
end

case command
when 'generate'
  if options[:kms_key_id].nil?
    STDERR.puts "Missing --kms-key-id option"
    STDERR.puts option_parser
    exit 1
  end

  EJSONWrapper.generate(region: options[:region],
                        kms_key_id: options[:kms_key_id],
                        file: options[:file])
when 'decrypt'
  decrypted_secrets = EJSONWrapper.decrypt(options[:file], use_kms: true, region: options[:region])
  if options[:secret]
    secret = options[:secret].to_sym
    unless decrypted_secrets.key?(secret)
      STDERR.puts "Secret not found"
      exit 1
    end
    puts decrypted_secrets.fetch(secret)
  else
    puts JSON.pretty_generate(decrypted_secrets)
  end
else
  STDERR.puts option_parser.banner
  exit 1
end
